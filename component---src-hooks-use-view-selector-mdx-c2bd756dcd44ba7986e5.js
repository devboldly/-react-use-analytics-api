(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{CUKV:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n("Fcif"),i=n("+I+c"),r=(n("mXGw"),n("/FXl")),l=n("TjRS"),o=n("SmrG"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/hooks/useViewSelector.mdx"}});var d={_frontmatter:c},s=l.a;function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)(s,Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",null,"useViewSelector"),Object(r.b)("h2",{id:"description"},"Description"),Object(r.b)("p",null,"This hook renders a ",Object(r.b)("a",{parentName:"p",href:"https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference#viewselector"},"ViewSelector"),"\ninto a container on the page using the ",Object(r.b)("a",{parentName:"p",href:"/react-use-analytics-api/useAnalyticsApi"},"Google Analytics Embed API"),"."),Object(r.b)("p",null,"The view selector can be used to change the Google Analytics view for data queries when ",Object(r.b)("a",{parentName:"p",href:"/react-use-analytics-api/useDataChart"},"rendering charts"),"."),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"import { useViewSelector } from 'react-use-analytics-api';\n")),Object(r.b)("p",null,"In your function component:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"const [viewId, setViewId] = React.useState();\nuseViewSelector(gapi, 'my-view-selector-container', viewId => setViewId(viewId));\n")),Object(r.b)("p",null,"Provide the hook with the loaded ",Object(r.b)("a",{parentName:"p",href:"/react-use-analytics-api/useAnalyticsApi"},"Google Analytics Embed API")," (",Object(r.b)("inlineCode",{parentName:"p"},"gapi"),"), the ID of the container DOM element to render to,\nand a callback for when the view changes."),Object(r.b)("p",null,"If ",Object(r.b)("inlineCode",{parentName:"p"},"gapi")," is ",Object(r.b)("inlineCode",{parentName:"p"},"undefined"),", nothing will be rendered."),Object(r.b)("h2",{id:"signature"},"Signature"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"useViewSelector( gapi?: GoogleAnalyticsEmbedAPI, viewSelectorId: string, onChange: (viewId: string) => void)) => void")),Object(r.b)("h3",{id:"arguments"},"Arguments"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"Argument"),Object(r.b)("th",{parentName:"tr",align:null},"Type"),Object(r.b)("th",{parentName:"tr",align:null},"Description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"gapi"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"GoogleAnalyticsEmbedAPI")," ","|"," ",Object(r.b)("inlineCode",{parentName:"td"},"undefined")),Object(r.b)("td",{parentName:"tr",align:null},"The ",Object(r.b)("a",{parentName:"td",href:"/react-use-analytics-api/useAnalyticsApi"},"Google Analytics Embed API"),". When ",Object(r.b)("inlineCode",{parentName:"td"},"undefined"),", nothing is rendered.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"viewSelectorId"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"string")),Object(r.b)("td",{parentName:"tr",align:null},"The ID of the DOM element to render the view selector to.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"onChange"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"(viewId: string) => void")),Object(r.b)("td",{parentName:"tr",align:null},"Called with the selected ",Object(r.b)("inlineCode",{parentName:"td"},"viewId")," whenever the view selection changes. Will be called immediately.")))),Object(r.b)("h3",{id:"return"},"Return"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"void")," - The hook has no return."),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"The following example shows use of a view selector to display the selected Google Analytics view ID. "),Object(r.b)("p",null,"This example includes full auth flow as well."),Object(r.b)("div",{style:{border:"solid 2px #67788a",padding:"20px"}},Object(r.b)(o.a,{mdxType:"UseViewSelectorExample"})),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { useAnalyticsApi, useAuthorize, useSignOut, useViewSelector } from 'react-use-analytics-api';\n\nexport function UseViewSelectorExample(props) {\n  const { ready, gapi, authorized, error } = useAnalyticsApi();\n  const [viewId, setViewId] = React.useState();\n  const viewSelectorContainerId = 'view-selector-container';\n  useViewSelector(authorized ? gapi : undefined, viewSelectorContainerId, viewId => setViewId(viewId));\n\n  // Workaround for API limitation - see useAuthorize docs\n  const authDiv = React.useRef(null);\n  const [authorizeCalled, setAuthorizeCalled] = React.useState(false);\n  const hasAuthElements = authDiv.current && authDiv?.current?.children?.length > 0;\n\n  const authorize = useAuthorize(gapi, {\n    clientId: props.clientId,\n    container: 'authorize-container-id',\n  });\n  const signOut = useSignOut(gapi);\n\n  React.useEffect(() => {\n    if (ready && !error && !authorizeCalled) {\n      authorize();\n      setAuthorizeCalled(true);\n    }\n  }, [ready, error, authorizeCalled, authorize]);\n\n  return (\n    <div>\n      {!ready && <div>Loading...</div>}\n      {ready && (\n        <div>\n          {authorized && (\n            <div>\n              <div style={{ fontSize: '200%' }}>\n                View ID: <span style={{ border: 'solid 3px orange', padding: '5px' }}>{viewId}</span>\n              </div>\n              <div id={viewSelectorContainerId} />\n              <div>\n                <button onClick={() => signOut()}>Sign Out</button>\n              </div>\n            </div>\n          )}\n          {!authorized && (\n            <div>\n              <div ref={authDiv} id=\"authorize-container-id\"></div>\n              {!hasAuthElements && <div>ðŸ”„ Refresh the page to sign in.</div>}\n            </div>\n          )}\n        </div>\n      )}\n      {error && <div>{error.toString()}</div>}\n    </div>\n  );\n}\n")))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/hooks/useViewSelector.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-hooks-use-view-selector-mdx-c2bd756dcd44ba7986e5.js.map