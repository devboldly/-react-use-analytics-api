{"version":3,"sources":["webpack:///../src/hooks/useViewSelector.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,+MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,yCACA,kBACE,GAAM,eADR,eAGA,4CAA2B,iBAAGC,WAAW,IACrC,KAAQ,yGADe,gBAA3B,4CAGqC,iBAAGA,WAAW,IAC/C,KAAQ,4CADyB,8BAHrC,KAMA,gHAA+F,iBAAGA,WAAW,IACzG,KAAQ,yCADmF,oBAA/F,KAGA,kBACE,GAAM,SADR,SAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,iEAIL,oDACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,8IAOL,yDAAwC,iBAAGA,WAAW,IAClD,KAAQ,4CAD4B,8BAAxC,KAE6C,0BAAYA,WAAW,KAAvB,QAF7C,mGAIA,2BAAU,0BAAYA,WAAW,KAAvB,QAAV,OAAkE,0BAAYA,WAAW,KAAvB,aAAlE,+BACA,kBACE,GAAM,aADR,aAGA,qBAAG,0BAAYA,WAAW,KAAvB,0HACH,kBACE,GAAM,aADR,aAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,YAGA,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MADX,iBAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,QAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,2BAFH,YAEsF,0BAAYA,WAAW,MAAvB,cACtF,kBAAIA,WAAW,KACb,MAAS,MADX,OAEW,iBAAGA,WAAW,KACrB,KAAQ,4CADD,8BAFX,UAIkD,0BAAYA,WAAW,MAAvB,aAJlD,2BAMF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,kBAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,WACH,kBAAIA,WAAW,KACb,MAAS,MADX,8DAIF,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,YAGA,kBAAIA,WAAW,KACb,MAAS,MACR,0BAAYA,WAAW,MAAvB,6BACH,kBAAIA,WAAW,KACb,MAAS,MADX,4BAEgC,0BAAYA,WAAW,MAAvB,UAFhC,wEAMN,kBACE,GAAM,UADR,UAGA,qBAAG,0BAAYA,WAAW,KAAvB,QAAH,8BACA,kBACE,GAAM,WADR,WAGA,6HACA,sEACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,gBADZ,k/D,6MA2ETJ,EAAWK,gBAAiB","file":"component---src-hooks-use-view-selector-mdx-868b2439c103374c5d4a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-use-analytics-api/react-use-analytics-api/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>useViewSelector</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`This hook renders a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference#viewselector\"\n      }}>{`ViewSelector`}</a>{`\ninto a container on the page using the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-analytics-api/useAnalyticsApi\"\n      }}>{`Google Analytics Embed API`}</a>{`.`}</p>\n    <p>{`The view selector can be used to change the Google Analytics view for data queries when `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-analytics-api/useDataChart\"\n      }}>{`rendering charts`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { useViewSelector } from \"react-use-analytics-api\";\n`}</code></pre>\n    <p>{`In your function component:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const [viewId, setViewId] = React.useState();\nuseViewSelector(gapi, \"my-view-selector-container\", (viewId) =>\n  setViewId(viewId)\n);\n`}</code></pre>\n    <p>{`Provide the hook with the loaded `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-analytics-api/useAnalyticsApi\"\n      }}>{`Google Analytics Embed API`}</a>{` (`}<inlineCode parentName=\"p\">{`gapi`}</inlineCode>{`), the ID of the container DOM element to render to,\nand a callback for when the view changes.`}</p>\n    <p>{`If `}<inlineCode parentName=\"p\">{`gapi`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`, nothing will be rendered.`}</p>\n    <h2 {...{\n      \"id\": \"signature\"\n    }}>{`Signature`}</h2>\n    <p><inlineCode parentName=\"p\">{`useViewSelector( gapi?: GoogleAnalyticsEmbedAPI, viewSelectorId: string, onChange: (viewId: string) => void)) => void`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Argument`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`gapi`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`GoogleAnalyticsEmbedAPI`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The `}<a parentName=\"td\" {...{\n              \"href\": \"/react-use-analytics-api/useAnalyticsApi\"\n            }}>{`Google Analytics Embed API`}</a>{`. When `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode>{`, nothing is rendered.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`viewSelectorId`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The ID of the DOM element to render the view selector to.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onChange`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`(viewId: string) => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Called with the selected `}<inlineCode parentName=\"td\">{`viewId`}</inlineCode>{` whenever the view selection changes. Will be called immediately.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"return\"\n    }}>{`Return`}</h3>\n    <p><inlineCode parentName=\"p\">{`void`}</inlineCode>{` - The hook has no return.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`The following example shows use of a view selector to display the selected Google Analytics view ID.`}</p>\n    <p>{`This example includes full auth flow as well.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from \"react\";\nimport {\n  useAnalyticsApi,\n  useAuthorize,\n  useSignOut,\n  useViewSelector,\n} from \"react-use-analytics-api\";\n\nexport function UseViewSelectorExample(props) {\n  const { ready, gapi, authorized, error } = useAnalyticsApi();\n  const [viewId, setViewId] = React.useState();\n  const viewSelectorContainerId = \"view-selector-container\";\n  useViewSelector(\n    authorized ? gapi : undefined,\n    viewSelectorContainerId,\n    (viewId) => setViewId(viewId)\n  );\n\n  // Workaround for API limitation - see useAuthorize docs\n  const authDiv = React.useRef(null);\n  const [authorizeCalled, setAuthorizeCalled] = React.useState(false);\n  const hasAuthElements =\n    authDiv.current && authDiv?.current?.children?.length > 0;\n\n  const authorize = useAuthorize(gapi, {\n    clientId: props.clientId,\n    container: \"authorize-container-id\",\n  });\n  const signOut = useSignOut(gapi);\n\n  React.useEffect(() => {\n    if (ready && !error && !authorizeCalled) {\n      authorize();\n      setAuthorizeCalled(true);\n    }\n  }, [ready, error, authorizeCalled, authorize]);\n\n  return (\n    <div>\n      {!ready && <div>Loading...</div>}\n      {ready && (\n        <div>\n          {authorized && (\n            <div>\n              <div style={{ fontSize: \"200%\" }}>\n                View ID:{\" \"}\n                <span style={{ border: \"solid 3px orange\", padding: \"5px\" }}>\n                  {viewId}\n                </span>\n              </div>\n              <div id={viewSelectorContainerId} />\n              <div>\n                <button onClick={() => signOut()}>Sign Out</button>\n              </div>\n            </div>\n          )}\n          {!authorized && (\n            <div>\n              <div ref={authDiv} id=\"authorize-container-id\"></div>\n              {!hasAuthElements && <div>ðŸ”„ Refresh the page to sign in.</div>}\n            </div>\n          )}\n        </div>\n      )}\n      {error && <div>{error.toString()}</div>}\n    </div>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}