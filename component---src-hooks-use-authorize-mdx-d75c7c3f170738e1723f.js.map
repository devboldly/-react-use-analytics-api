{"version":3,"sources":["webpack:///../src/hooks/useAuthorize.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-hooks-use-authorize-mdx-d75c7c3f170738e1723f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/react-use-analytics-api/react-use-analytics-api/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>useAuthorize</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`useAuthorize`}</inlineCode>{` hook can be used to authorize the user via the `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-analytics-api/useAnalyticsApi\"\n      }}>{`Google Analytics Embed API`}</a>{` in several ways:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Render an authorize button using a `}<a parentName=\"li\" {...{\n          \"href\": \"https://justinmahar.github.io/react-analytics-charts/google-oauth-client-id\"\n        }}>{`Client ID`}</a></li>\n      <li parentName=\"ul\">{`Authorize with an `}<a parentName=\"li\" {...{\n          \"href\": \"https://ga-dev-tools.appspot.com/embed-api/server-side-authorization/\"\n        }}>{`access token`}</a></li>\n    </ul>\n    <p>{`The user must be authorized before the API can query for things like chart data.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { useAuthorize } from \"react-use-analytics-api\";\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`useAuthorize`}</inlineCode>{` hook returns an `}<inlineCode parentName=\"p\">{`authorize`}</inlineCode>{` function that calls `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference#auth\"\n      }}><inlineCode parentName=\"a\">{`gapi.auth.authorize`}</inlineCode></a>{` using the provided `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference#auth-options\"\n      }}>{`auth options`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"using-a-client-id\"\n    }}>{`Using A `}<a parentName=\"h3\" {...{\n        \"href\": \"https://justinmahar.github.io/react-analytics-charts/google-oauth-client-id\"\n      }}>{`Client ID`}</a></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const authorize = useAuthorize(gapi, {\n  clientId:\n    \"1234567890123-abc123def456ghi789jkl012mno345pq.apps.googleusercontent.com\",\n  container: \"authorize-container-id\",\n});\n`}</code></pre>\n    <p>{`Call `}<inlineCode parentName=\"p\">{`authorize`}</inlineCode>{` to render an authorize button (when signed out) and sign-in information (when signed in) into the container with that ID. The button can be used to authorize the user.`}</p>\n    <p>{`If the user is already authorized and reloads the page, they will be signed in immediately when calling `}<inlineCode parentName=\"p\">{`authorize`}</inlineCode>{`.`}</p>\n    <p>{`The contents of the container are not managed by React, so be sure to leave it empty and not to do anything to trigger a render on that container.`}</p>\n    <h4 {...{\n      \"id\": \"limitations\"\n    }}>{`Limitations`}</h4>\n    <p><strong parentName=\"p\">{`Google's API doesn't render the authorize button more than once per page load.`}</strong>{` Be sure to take this into consideration.`}</p>\n    <p>{`A novel approach is used in the `}<a parentName=\"p\" {...{\n        \"href\": \"#example\"\n      }}>{`example below`}</a>{` to detect whether the container is empty and prompt the user to refresh the page.`}</p>\n    <h3 {...{\n      \"id\": \"using-an-access-token\"\n    }}>{`Using An `}<a parentName=\"h3\" {...{\n        \"href\": \"https://ga-dev-tools.appspot.com/embed-api/server-side-authorization/\"\n      }}>{`Access Token`}</a></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const authorize = useAuthorize(gapi, {\n  serverAuth: {\n    access_token: \"ACCESS_TOKEN_GOES_HERE\",\n  },\n});\n`}</code></pre>\n    <p>{`Call `}<inlineCode parentName=\"p\">{`authorize`}</inlineCode>{` to authorize using the access token provided.`}</p>\n    <h2 {...{\n      \"id\": \"signature\"\n    }}>{`Signature`}</h2>\n    <p><inlineCode parentName=\"p\">{`useAuthorize( gapi: GoogleAnalyticsEmbedAPI | undefined, options: AuthorizeOptions, onSignIn?: () => void ) => (() => void)`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Argument`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`gapi`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`GoogleAnalyticsEmbedAPI`}</inlineCode>{` `}{`|`}{` `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The `}<a parentName=\"td\" {...{\n              \"href\": \"/react-use-analytics-api/useAnalyticsApi\"\n            }}>{`Google Analytics Embed API`}</a>{`. When `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode>{`, calling `}<inlineCode parentName=\"td\">{`authorize`}</inlineCode>{` does nothing.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`options`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference#auth-options\"\n            }}><inlineCode parentName=\"a\">{`AuthorizeOptions`}</inlineCode></a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The `}<a parentName=\"td\" {...{\n              \"href\": \"https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference#auth-options\"\n            }}>{`options`}</a>{` for the authorization.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`onSignIn`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`() => void`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Called on a successful sign-in. You can use this to do things like change the view on auth success.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"return\"\n    }}>{`Return`}</h3>\n    <p>{`The hook returns a function, `}<inlineCode parentName=\"p\">{`authorize`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`authorize() => void\n`}</code></pre>\n    <p>{`When `}<inlineCode parentName=\"p\">{`gapi`}</inlineCode>{` is not `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode>{`, this function calls `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference#auth\"\n      }}><inlineCode parentName=\"a\">{`gapi.auth.authorize`}</inlineCode></a>{` using the provided `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/analytics/devguides/reporting/embed/v1/component-reference#auth-options\"\n      }}>{`auth options`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`The following example demonstrates use of the `}<inlineCode parentName=\"p\">{`useAuthorize`}</inlineCode>{` hook with a `}<a parentName=\"p\" {...{\n        \"href\": \"https://justinmahar.github.io/react-analytics-charts/google-oauth-client-id\"\n      }}>{`Client ID`}</a>{` to sign a user into Google Analytics.`}</p>\n    <p>{`Due to an `}<a parentName=\"p\" {...{\n        \"href\": \"#limitations\"\n      }}>{`API limitation`}</a>{`, the authorize button can only be rendered to the page once per page load. This means once the container `}<inlineCode parentName=\"p\">{`div`}</inlineCode>{` is destroyed and re-rendered by React, the authorize button will no longer appear.`}</p>\n    <p>{`To see this happening, use the sidebar to navigate to another page on this site (which doesn't trigger a full page reload), then come back to this one. The API will no longer render the authorize button in the example below.`}</p>\n    <p>{`To take this into consideration, we use a `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` to check if the authorize container has any contents after `}<inlineCode parentName=\"p\">{`authorize`}</inlineCode>{` is called. If it's empty when it shouldn't be, we show a prompt to refresh the page. You can replace this with a button that performs a refresh, if you'd like.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import * as React from \"react\";\nimport {\n  useAnalyticsApi,\n  useAuthorize,\n  useSignOut,\n} from \"react-use-analytics-api\";\n\nexport function UseAuthorizeExample(props) {\n  const { ready, gapi, authorized, error } = useAnalyticsApi();\n  const authorize = useAuthorize(gapi, {\n    clientId,\n    container: \"authorize-container-id\",\n  });\n  const signOut = useSignOut(gapi);\n\n  // Workaround for API limitation\n  const [authorizeCalled, setAuthorizeCalled] = React.useState(false);\n  const authDiv = React.useRef(null);\n  const hasAuthElements =\n    authDiv.current && authDiv?.current?.children?.length > 0;\n\n  React.useEffect(() => {\n    if (ready && !error && !authorizeCalled) {\n      authorize();\n      setAuthorizeCalled(true);\n    }\n  }, [authorize, authorizeCalled, error, ready]);\n\n  return (\n    <div>\n      {!error &&\n        (ready && !!gapi ? (\n          <div>\n            {authorized && (\n              <div>\n                ☀️ Logged into Google Analytics!{\" \"}\n                <button onClick={() => signOut()}>Sign Out</button>\n              </div>\n            )}\n            {!authorized && <div>🔐 Not logged into Google Analytics</div>}\n            <div id=\"authorize-container-id\" ref={authDiv} />\n            {!authorized && authorizeCalled && !hasAuthElements && (\n              <div>🔄 Refresh the page to access analytics.</div>\n            )}\n          </div>\n        ) : (\n          <div>⌛ Loading...</div>\n        ))}\n      {error && <div>{error.toString()}</div>}\n    </div>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"manually-synchronizing-hooks\"\n    }}>{`Manually Synchronizing Hooks`}</h2>\n    <p>{`If you authorize or sign out manually outside of this library (and React), you will want to synchronize any hooks you have instantiated so they're aware of your new authorization status.`}</p>\n    <p>{`To do this, you can access the emitter and singleton used by the hooks in this library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import { apiStateEmitter, apiSingleton } from \"react-use-analytics-api\";\n`}</code></pre>\n    <p>{`Then, when your auth state changes, you can manually update the hooks via the `}<inlineCode parentName=\"p\">{`authorized`}</inlineCode>{` event:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`apiSingleton.authorized = isAuthorized;\napiStateEmitter.emit(\"authorized\", isAuthorized);\n`}</code></pre>\n    <p>{`This will update the authorized state for all existing hooks as well as any new hooks instantiated thereafter.`}</p>\n    <p>{`You don't need to worry about this if you use the `}<inlineCode parentName=\"p\">{`useAuthorize`}</inlineCode>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/react-use-analytics-api/useSignOut\"\n      }}><inlineCode parentName=\"a\">{`useSignOut`}</inlineCode></a>{` hooks, since they do this for you automatically.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}